version: "3.7"
services:

  ## MySQL Docker Compose Config

  mysql:
    container_name: mysql
    image: mysql
    environment:
      MYSQL_ROOT_PASSWORD: 123456
      PGDATA: /data/mysql
    volumes:
      - ./my-sql:/data/mysql
    ports:
      - "3306:3306"
    expose:
      - "3306"
    restart: unless-stopped

  ## Mongo Docker Compose Config
  mongo:
    container_name: mongo
    image: mongo:4.4.14-rc0-focal
    #    restart: unless-stopped
    ports:
      - "27017:27017"
    expose:
      - "27017"
    volumes:
      - ./mongo-data:/data/db

  zookeeper:
    restart: always
    image: docker.io/bitnami/zookeeper:3.8
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper-volume:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    restart: always
    image: docker.io/bitnami/kafka:3.3
    container_name: kafka
    ports:
      - "9093:9093"
    expose:
      - "9093"
    volumes:
      - "kafka-volume:/bitnami"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://kafka:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper

  discovery-server:
    image: anveshlp/discovery-server
    container_name: discovery-server
    restart: unless-stopped
    #    pull_policy: always
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
  #    depends_on:
  #      - zipkin

  api-gateway:
    image: anveshlp/api-gateway
    container_name: api-gateway
    restart: unless-stopped
    #    pull_policy: always
    ports:
      - "8181:8080"
    expose:
      - "8181"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
    depends_on:
      #      - zipkin
      - discovery-server
  #      - keycloak

  ## Product-Service Docker Compose Config
  product-service:
    container_name: product-service
    restart: unless-stopped
    image: anveshlp/product-service
    #    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mongo
      - discovery-server
      - api-gateway

  ## Order-Service Docker Compose Config
  order-service:
    container_name: order-service
    restart: unless-stopped
    image: anveshlp/order-service
    #    pull_policy: always
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306
      - SPRING_DATASOURCE_DATABASE=order_service
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=123456
      - spring.datasource.hikari.maximum-pool-size=5
      - spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
      - SPRING_PROFILES_ACTIVE=docker
      - spring.datasource.initialization-mode=always
      - spring.jpa.properties.hibernate.current_session_context_class=org.springframework.orm.hibernate5.SpringSessionContext
      - spring.jpa.show-sql=true
      - spring.jpa.properties.hibernate.format_sql=true
    depends_on:
      - kafka
      - mysql
      - discovery-server
      - api-gateway

  ## Inventory-Service Docker Compose Config
  inventory-service:
    container_name: inventory-service
    restart: unless-stopped
    image: anveshlp/inventory-service
    #    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/order_service
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=123456
      - spring.datasource.hikari.maximum-pool-size=5
      - spring.datasource.initialization-mode=always
      - spring.jpa.show-sql=true
      - spring.jpa.properties.hibernate.format_sql=true

    #      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-inventory:5432/inventory-service
    depends_on:
      - mysql
      - discovery-server
      - api-gateway

  ## Notification-Service Docker Compose Config
  notification-service:
    container_name: notification-service
    restart: unless-stopped
    image: anveshlp/notification-service
    #    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      #      - zipkin
      - kafka
      - discovery-server
      - api-gateway
volumes:
  kafka-volume:
  zookeeper-volume:

